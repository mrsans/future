package org.future.test.nio;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import org.apache.commons.io.IOUtils;
import org.jasypt.util.text.BasicTextEncryptor;
import org.junit.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.charset.Charset;
import java.util.Base64;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.Future;

public class ChannelTest {

    @Test
    public void TestChannel_1() throws IOException {
        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
        InetSocketAddress address = new InetSocketAddress("127.0.0.1", 10000);
        serverSocketChannel.bind(address);
        SocketChannel accept = serverSocketChannel.accept();
        ByteBuffer allocate = ByteBuffer.allocate(1024);
        int count = accept.read(allocate);
        allocate.flip();
        Charset charset = Charset.forName("UTF-8");//Java.nio.charset.Charset
        System.out.println(new String(charset.decode(allocate).array(), 0, count));
    }

    @Test
    public void test_Selector() throws IOException {
        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
        Selector selector = Selector.open();
        serverSocketChannel.bind(new InetSocketAddress(8888));
        serverSocketChannel.configureBlocking(false);
        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);
        while (true) {
            if (selector.select() != 0) {
                Set<SelectionKey> selectionKeys = selector.selectedKeys();
                Iterator<SelectionKey> iterator = selectionKeys.iterator();
                while (iterator.hasNext()) {
                    SelectionKey next = iterator.next();
                    if (next.isAcceptable()) {
                        SocketChannel accept = serverSocketChannel.accept();
                        accept.configureBlocking(false);
                        accept.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(1024));
                    }
                    if (next.isReadable()) {
                        SocketChannel channel = (SocketChannel) next.channel();
                        ByteBuffer attachment = (ByteBuffer)next.attachment();
                        channel.read(attachment);
                    }
                    iterator.remove();
                }
                System.out.println();

            }
        }
    }

    @Test
    public void aa() {
        BasicTextEncryptor textEncryptor = new BasicTextEncryptor();
        //加密所需的密钥
        textEncryptor.setPassword("thunisoft");
        //要加密的数据（数据库的用户名或密码） username: ENC(mADRysJS3ApxrkXgNhv6RA==)
        //    password: ENC(ytvIJZDyxwMPT7gdq/sDVRdREhsxLdUw)
        String username = textEncryptor.decrypt("mADRysJS3ApxrkXgNhv6RA==");
        String password = textEncryptor.decrypt("DCLBYkIw4AYQHEVfprczsY7c5QzYYxGN");
        System.out.println("username:"+username);
        System.out.println("password:"+password);
    }


    @Test
    public void test_2() throws Exception {
        AsynchronousServerSocketChannel channel = AsynchronousServerSocketChannel.open();
        Future<AsynchronousSocketChannel> accept = channel.accept();
        AsynchronousSocketChannel asynchronousSocketChannel = accept.get();
    }

    @Test
    public void test_netty_1() {
        EmbeddedChannel embeddedChannel = new EmbeddedChannel(
                new LengthFieldBasedFrameDecoder(1024, 0, 4, 1 , 0),
                new LoggingHandler(LogLevel.DEBUG)
        );
        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer();
        byte[] bytes = "hello world".getBytes();
        buffer.writeInt(bytes.length);
        buffer.writeBytes(bytes);
        embeddedChannel.writeInbound(buffer);
    }

    public static class AA {
        public void t() {

        }
    }


    @Test
    public void test_netty_2() throws Exception {
        String base64 = "";
        byte[] decode = Base64.getDecoder().decode(base64);
        FileOutputStream fileOutputStream = new FileOutputStream(new File("C:\\Users\\peng\\Desktop\\zs\\aa.class"));
        IOUtils.write(decode, fileOutputStream);
    }
}

